<?xml version='1.1' encoding='UTF-8'?>
<scriptApproval plugin="script-security@1369.v9b_98a_4e95b_2d">
  <approvedScriptHashes>
    <string>SHA512:6a936adfdbc45de60243f4c60229f36db4faca86806a7149dc84acbeacf409323e6c62a25a8cabf9b124a1473f0176b559ea416c694f2b202fa37b2b63fd56c4</string>
    <string>SHA512:b0730952008b209b086838ad971e889c31997fed9c23d280c58b740e8c706bcf9ca0f509e9de121e6e5375f4bed2d2beb04ac16cc737d988e404b3a654f77124</string>
  </approvedScriptHashes>
  <approvedSignatures/>
  <aclApprovedSignatures/>
  <approvedClasspathEntries/>
  <forceSandbox>false</forceSandbox>
  <pendingScripts>
    <pendingScript>
      <context>
        <item>JOB-DSL</item>
      </context>
      <script>import groovy.json.JsonSlurper

def project_env = &quot;DEVELOPMENT&quot;
def git_repo = &quot;https://github.com/your-org/laravel-app&quot;
def service = &quot;laravel-app&quot;
def dockerhub_user = &quot;yourdockerhubuser&quot;

pipelineJob(&quot;${project_env}&quot;) {
    parameters {
        choiceParam(&apos;REQUESTED_ACTION&apos;, [&apos;Release&apos;, &apos;Restart&apos;], &apos;&apos;)
        stringParam(&apos;BRANCH&apos;, &apos;main&apos;, &apos;Git branch to build&apos;)
    }

    logRotator { numToKeep(10) }

    definition {
        cps {
            sandbox()
            script(&apos;&apos;&apos;
node {
    try {
        stage(&apos;Checkout&apos;) {
            checkout([$class: &apos;GitSCM&apos;,
                branches: [[name: &quot;${params.BRANCH}&quot;]],
                userRemoteConfigs: [[credentialsId: &apos;user-github&apos;, url: git_repo]]
            ])
        }

        if (false) {
            stage(&apos;Build Docker Image&apos;) {
                sh &quot;&quot;&quot;
                docker buildx create --name mybuilder --use || true
                docker buildx inspect --bootstrap
                docker buildx build --platform linux/amd64,linux/arm64 -t &apos;&apos;&apos; + dockerhub_user + &apos;&apos;&apos;/&apos;&apos;&apos; + service + &apos;&apos;&apos;:${params.BRANCH}-${GIT_COMMIT} .
                &quot;&quot;&quot;
            }
        }

        if (false) {
            stage(&apos;Trivy Security Scan&apos;) {
                sh &quot;&quot;&quot;
                if ! command -v trivy &amp;&gt; /dev/null; then
                    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                fi
                trivy image --severity HIGH,CRITICAL --exit-code 1 &apos;&apos;&apos; + dockerhub_user + &apos;&apos;&apos;/&apos;&apos;&apos; + service + &apos;&apos;&apos;:${params.BRANCH}-${GIT_COMMIT}
                &quot;&quot;&quot;
            }
        }

        if (false) {
            stage(&apos;Push Docker Image&apos;) {
                sh &quot;&quot;&quot;
                docker push &apos;&apos;&apos; + dockerhub_user + &apos;&apos;&apos;/&apos;&apos;&apos; + service + &apos;&apos;&apos;:${params.BRANCH}-${GIT_COMMIT}
                &quot;&quot;&quot;
            }
        }

        if (false) {
            stage(&apos;Test Docker Image&apos;) {
                sh &quot;&quot;&quot;
                docker run --rm &apos;&apos;&apos; + dockerhub_user + &apos;&apos;&apos;/&apos;&apos;&apos; + service + &apos;&apos;&apos;:${params.BRANCH}-${GIT_COMMIT} \
                    php artisan test
                &quot;&quot;&quot;
            }
        }

        if (false) {
            stage(&apos;Run Docker Container&apos;) {
                sh &apos;&apos;&apos;
                docker run -d --name &apos;&apos;&apos; + service + &apos;&apos;&apos;-test -p 8081:80 &apos;&apos;&apos; + dockerhub_user + &apos;&apos;&apos;/&apos;&apos;&apos; + service + &apos;&apos;&apos;:${params.BRANCH}-${GIT_COMMIT}
                &apos;&apos;&apos;
            }
        }

    } catch (e) {
        currentBuild.result = &quot;FAILED&quot;
        throw e
    }
}
&apos;&apos;&apos;.stripIndent())
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
  </pendingScripts>
  <pendingSignatures/>
  <pendingClasspathEntries/>
</scriptApproval>